<?

namespace Pokeliga\Data;

/**
* Интерфейс объекта, состоящего в структурном графе.
* Вся структура данных, сущностей и прочего представляет собой граф, по которому можно перемещаться запросами follow_track(). Трек (след) должен представлять собой строку и, возможно, массив дополнительных параметров. Путь (стек следов) представляет собой массив следов, а в текстовом виде - следы, разделённые точкой, например:

owner.nickname (из шаблона с контекстом-покемоном, показывает имя тренера)
page.input.pokemon (из шаблона, показывающегося в странице, показывает ссылку на покемона из ввода)
adopts.pokemon[id=5].level (показывает уровень покемона № 5)
adopts.pokemon[species.title=Бульбазавр].portrait (показывает портреты покемонов, имя вида которых "Бульбазавр")
adopts.pokemon[species.title=Бульбазавр; random 5].portrait (показывает портреты случайных пяти покемонов, имя вида которых "Бульбазавр")
users.user[birthday.month:=data.today.month; birthday.day:=data.today.day; order by nickname].portrait (показывает портреты пользователей, у которых сегодня ДР)
adopts.pokemon[no_misison_cooldown; mission=1; player:=adopts.current_player; order by level desc].portraits (показывает портреты покемонов данного тренера, не имеющих кулдауна в данной миссии)

Не всё это уже реализовано! Но лучше всего, чтобы тексты шаблонов могли принимать и интерпретировать такой ввод.

Путь делится на три части: начало (startpoint), промежуточные точки (waypoints) и конец (endpoint).

Начало определяет точку отсчёта и может быть "текущим объектом" (например, шаблон); "контекстом" (например, объект-контекст этого шаблона); или одним из "якорей" (например, старшая страница шаблона или подключённые модули движка).
Промежуточные точки достигаются через результат работы метода follow_track() на последовательных объектах.
Конечная точка не обязана отвечать на follow_track(), но должна быть подходящим ответчиком для типа запроса: например, шаблонизатором, если мы хотим шаблон; хранилищем значений, если требуется значение.

Следует заметить, что описанная структура - абстрактная. шаблоны вызываются синтаксисом {{<путь>|параметр|параметр...}}. значения - синтаксисом @<путь>. шаблон может иметь форму {{#<код>}},  относящуюся не к поиску значения, а создающую шаблон с соответствующим текстовым ключом. В зависимости от всего этого, по-разному обрабатывается первая точка и последняя. но подразумевается, что follow_track() не зависим от ситуации, всегда актуален и всегда действует по одной логике.

*/

interface Pathway
{
	/**
	* Этот метод принимает обращение, взятое из стёка, и пытается получить следующий шаг на пути обращения.
	* @param string $track "След", по которому нужно найти следующую локацию.
	* @param array $line Вспомогательные данные, поясняющие след.
	* @return \Pokeliga\Entlink\FinalPromise|Object|null Если обещание, то результат является следующей локацией; невозможность получить незультат - невозможностью двинуться дальше. То же значение имеет null. Если возвращается другой объект, то он должен быть следующей локацией.
	*/
	public function follow_track($track, $line=[]);
}

?>