<?

// в глобальном пространстве имён, потому что это одни из самых используемых классов, и писать повсюду \что-нибудь\что-нибудь\Report_такой-то было бы ужасно неудобно!

/**
* Отчёт, докладывающей о прошедшей или проходящей операции.

* Всякий раз, когда нужно вернуть данные о прошедшей операции вместо обычного ответа, мы возвращаем объект класса, унаследованного от этого. Если вернулся объект класса Report, то это всегда отчёт об операции и никогда - непосредственный результат выполнения метода. Это избавляет от неоднозначности таких ответов как, например, false (результат - false или же операция не удалась?).
*/
class Report implements \Pokeliga\Entlink\Mediator
{
	/**
	* @var Object|null $source Объект, сгенерировавший отчёт. Предназначен только для чтения.
	*/
	public
		$source=null;
	
	/**
	* @param Object $by Объект, сгенерировавший отчёт.
	*/
	public function __construct($by=null)
	{
		if ($by!==null) $this->sign($by);
	}
	
	/**
	* Строковое представление отчёта для просмотра во время отладки.
	*/
	public function human_readable()
	{
		return get_class($this);
	}
	
	/**
	* Подписывание отчёта сгенерировавшим его объектом.
	* @return self
	* @param Object $by Объект, подписывающийся под отчётом.
	* @throws Exception если отчёт уже подписан.
	*/
	public function sign($by)
	{
		global $debug;
		if (!$debug) return $this;
		if ($this->source!==null) throw new \Exception('double signed Report');  // в будущем, возможно, будет клонировать и переподписывать отчёт.
		$this->source=$by;
		return $this;
	}
}

/**
* Этот отчёт возвращают задачи, находящиеся в процессе выполнения и не имеющие зависимостей.
** Большая часть обмена данными - это отчёты класса Report_resolution, Report_impossible, Report_dependant и Report_promise. В частных случаях (в основном логад отладки) может обрабатываться Report_in_progress.
*/
class Report_in_progress extends Report {}